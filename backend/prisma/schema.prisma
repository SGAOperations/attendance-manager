// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TEST")
}

model Role { // defines the permissions that a user may have in the attendance manager, each role can belong to multiple users
  roleId   String @id @default(uuid())
  roleType String // Valid values: admin, member

  users    User[]
}

model User { // verified profile in the attendance manager, each user can have multiple attendance records but only one role
  userId      String       @id @default(uuid())
  username    String
  password    String
  email       String       @unique
  firstName   String
  lastName    String
  roleId      String

  role        Role         @relation(fields: [roleId], references: [roleId])
  attendance  Attendance[]
}

model Meeting { // an sga meeting that will be tracked using the attendance manager, each meeting can have multiple attendance records
  meetingId String @id @default(uuid())
  name      String
  date      String
  startTime String
  endTime   String
  notes     String

  attendance Attendance[]
}

model Attendance { // the attendance record for a meeting, each attendance record belongs to one user and may or may not have one request
  attendanceId String @id @default(uuid())
  userId       String
  meetingId    String
  status       String // Valid values: Pending, Present, Pending absence, Excused absence, Unexcused absence

  user         User    @relation(fields: [userId], references: [userId])
  meeting      Meeting @relation(fields: [meetingId], references: [meetingId])
  request      Request?

  @@unique([userId, meetingId])
}

model Request { // a member sends a request form to the admin for an excused absence, each request belongs to one attendance record
  requestId     String @id @default(uuid())
  attendanceId  String @unique
  reason        String

  attendance    Attendance @relation(fields: [attendanceId], references: [attendanceId])
}